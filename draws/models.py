from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime

# Represents a Draw document in MongoDB
class Draw(BaseModel):
    id: Optional[str] = Field(alias='_id', default=None) # MongoDB ID
    status: str  # e.g., "open", "closed", "completed"
    participants: List[str] = Field(default_factory=list)
    ledger_hash: Optional[str] = None
    winner: Optional[str] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    # draw_id: int # This will be replaced by MongoDB's _id

    class Config:
        populate_by_name = True
        json_encoders = {
            datetime: lambda dt: dt.isoformat(),
        }
        # Pydantic v2 config
        model_config = {
            "from_attributes": True, # orm_mode for Pydantic v1
            "populate_by_name": True,
             "json_encoders": {
                datetime: lambda dt: dt.isoformat()
            }
        }

# Model for creating a new draw, as _id is generated by MongoDB
class DrawCreate(BaseModel):
    status: str = "open"
    participants: List[str] = Field(default_factory=list)
    timestamp: datetime = Field(default_factory=datetime.utcnow)

# Model for updating a draw
class DrawUpdate(BaseModel):
    status: Optional[str] = None
    participants: Optional[List[str]] = None
    ledger_hash: Optional[str] = None
    winner: Optional[str] = None
