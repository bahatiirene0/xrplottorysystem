from pydantic import BaseModel, Field
from typing import List, Optional, Any
from datetime import datetime

# Model to store user's selection for Pick N type games
class PickNSelectionData(BaseModel):
    picks: List[Any] # List of numbers or symbols picked by the user. Type can be int, str, etc.
    # Add any other relevant selection info here if needed in the future.

class TicketPurchaseRequest(BaseModel):
    wallet_address: str
    num_tickets: int
    category_id: str = Field(..., description="The ID of the lottery category to buy tickets for")
    selection: Optional[List[Any]] = Field(None, description="User's number/symbol picks for 'Pick N' type games. Required if category is 'Pick N'. Example: For a Pick 3 game, this could be [1, 2, 3]")
    referral_code: Optional[str] = Field(None, min_length=6, max_length=10, description="Optional referral code to apply.") # Assuming codes are around this length

class TicketPurchaseResponse(BaseModel):
    success: bool
    message: str
    tickets: List[str]  # List of ticket IDs (MongoDB _id as str)

# Represents a ticket document in MongoDB
class TicketEntry(BaseModel):
    id: Optional[str] = Field(alias='_id', default=None, description="MongoDB document ID")
    wallet_address: str
    draw_id: str # Will store MongoDB _id of the draw as str
    timestamp: datetime
    selection_data: Optional[PickNSelectionData] = Field(None, description="User's picks for 'Pick N' games")

    class Config:
        populate_by_name = True
        json_encoders = {
            datetime: lambda dt: dt.isoformat(),
        }
        model_config = {
            "from_attributes": True,
            "populate_by_name": True,
             "json_encoders": {
                datetime: lambda dt: dt.isoformat()
            }
        }

# This model can be used for creating tickets, as _id is generated by mongo
class TicketCreate(BaseModel):
    wallet_address: str
    draw_id: str # Will store MongoDB _id of the draw as str
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    selection_data: Optional[PickNSelectionData] = None
